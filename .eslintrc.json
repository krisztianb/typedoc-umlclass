{
    "env": {
        "node": true,
        "es2021": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 2021,
        "sourceType": "module",
        "project": "tsconfig.json"
    },
    "plugins": ["@typescript-eslint", "ordered-imports", "unicorn", "jsdoc"],
    "rules": {
        // Possible errors
        "no-await-in-loop": "error",
        "no-extra-semi": "off", // in favor of @typescript-eslint/no-extra-semi (part of recommended)
        "no-promise-executor-return": "error",
        "no-template-curly-in-string": "error",
        "no-unreachable-loop": "error",
        "no-useless-backreference": "error",
        "require-atomic-updates": "error",

        // Best practices
        "class-methods-use-this": "error",
        "consistent-return": "error",
        "curly": "error",
        "default-case-last": "error",
        "eqeqeq": "error",
        "no-constructor-return": "error",
        "no-else-return": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-floating-decimal": "error",
        "no-implicit-coercion": "error",
        "no-iterator": "error",
        "no-lone-blocks": "error",
        "no-multi-str": "error",
        "no-new": "error",
        "no-new-wrappers": "error",
        "no-octal-escape": "error",
        "no-proto": "error",
        "no-redeclare": "off", // in favor of @typescript-eslint/no-redeclare
        "no-return-assign": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
        "no-unmodified-loop-condition": "error",
        "no-useless-call": "error",
        "no-useless-concat": "error",
        "no-useless-return": "error",
        "no-void": "error",
        "no-warning-comments": ["warn", { "terms": ["todo"], "location": "anywhere" }],
        "radix": "error",
        "wrap-iife": "error",
        "yoda": "error",

        // Variables
        "no-label-var": "error",
        "no-undef-init": "error",
        "no-unused-vars": "off", // in favor of @typescript-eslint/no-unused-vars (part of recommended)

        // Stylistic issues
        "id-denylist": [
            "error",
            "any",
            "Number",
            "number",
            "String",
            "string",
            "Boolean",
            "boolean",
            "Undefined",
            "undefined"
        ],
        "max-len": [
            "error",
            {
                "code": 120, // length should match Prettier config
                "ignoreComments": false,
                "ignoreTrailingComments": false,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true,
                "ignoreRegExpLiterals": true
            }
        ],
        "no-lonely-if": "error",
        "no-nested-ternary": "error",
        "no-unneeded-ternary": "error",
        "unicode-bom": "error",

        // ECMAScript 6
        "no-dupe-class-members": "off", // in favor of @typescript-eslint/no-dupe-class-members
        "no-duplicate-imports": "error",
        "no-var": "error",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "no-useless-rename": "error",

        // plugin: @typescript-eslint - basic rules
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "default",
                "format": ["camelCase"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "typeLike",
                "format": ["PascalCase"]
            },
            {
                "selector": "enumMember",
                "format": ["PascalCase"]
            }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": ["error", "type"],
        "@typescript-eslint/explicit-function-return-type": ["error"],
        "@typescript-eslint/explicit-member-accessibility": ["error"],
        "@typescript-eslint/member-ordering": [
            "error",
            {
                "default": [
                    // Index signature
                    "signature",

                    // Fields
                    "public-decorated-field",
                    "public-instance-field",
                    "public-abstract-field",
                    "public-field",

                    "protected-decorated-field",
                    "protected-instance-field",
                    "protected-abstract-field",
                    "protected-field",

                    "private-decorated-field",
                    "private-instance-field",
                    "private-field",

                    "instance-field",
                    "abstract-field",
                    "decorated-field",
                    "field",

                    // Constructors
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "constructor",

                    // Getters
                    "public-decorated-get",
                    "public-instance-get",
                    "public-abstract-get",
                    "public-get",

                    "protected-decorated-get",
                    "protected-instance-get",
                    "protected-abstract-get",
                    "protected-get",

                    "private-decorated-get",
                    "private-instance-get",
                    "private-get",

                    "instance-get",
                    "abstract-get",
                    "decorated-get",
                    "get",

                    // Setters
                    "public-decorated-set",
                    "public-instance-set",
                    "public-abstract-set",
                    "public-set",

                    "protected-decorated-set",
                    "protected-instance-set",
                    "protected-abstract-set",
                    "protected-set",

                    "private-decorated-set",
                    "private-instance-set",
                    "private-set",

                    "instance-set",
                    "abstract-set",
                    "decorated-set",
                    "set",

                    // Methods
                    "public-decorated-method",
                    "public-instance-method",
                    "public-abstract-method",
                    "public-method",

                    "protected-decorated-method",
                    "protected-instance-method",
                    "protected-abstract-method",
                    "protected-method",

                    "private-decorated-method",
                    "private-instance-method",
                    "private-method",

                    "instance-method",
                    "abstract-method",
                    "decorated-method",
                    "method",

                    // Static
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "static-field",

                    "public-static-get",
                    "protected-static-get",
                    "private-static-get",
                    "static-get",

                    "public-static-set",
                    "protected-static-set",
                    "private-static-set",
                    "static-set",

                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "static-method"
                ]
            }
        ],
        "@typescript-eslint/no-confusing-non-null-assertion": ["error"],
        "@typescript-eslint/no-invalid-void-type": ["error"],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": ["error"],
        "@typescript-eslint/no-unnecessary-condition": ["error"],
        "@typescript-eslint/no-unnecessary-qualifier": ["error"],
        "@typescript-eslint/no-unnecessary-type-arguments": ["error"],
        "@typescript-eslint/parameter-properties": ["error"],
        "@typescript-eslint/prefer-enum-initializers": ["error"],
        "@typescript-eslint/prefer-for-of": ["error"],
        "@typescript-eslint/prefer-literal-enum-member": ["error"],
        "@typescript-eslint/prefer-readonly": ["error"],
        "@typescript-eslint/promise-function-async": ["error"],

        // plugin: @typescript-eslint - extension rules
        "@typescript-eslint/default-param-last": ["error"],
        "@typescript-eslint/no-dupe-class-members": ["error"],
        "@typescript-eslint/no-invalid-this": ["error"],
        "@typescript-eslint/no-loop-func": ["error"],
        "@typescript-eslint/no-loss-of-precision": ["error"],
        "@typescript-eslint/no-redeclare": ["error"],
        "@typescript-eslint/no-shadow": ["error"],
        "@typescript-eslint/no-unused-expressions": ["error"],
        "@typescript-eslint/no-use-before-define": ["error"],
        "@typescript-eslint/no-useless-constructor": ["error"],
        "@typescript-eslint/return-await": ["error"],

        // plugin: ordered-imports
        "ordered-imports/ordered-imports": [
            "error",
            {
                "symbols-first": false,
                "declaration-ordering": ["source", "case-insensitive"],
                "specifier-ordering": "case-insensitive"
            }
        ],

        // plugin: unicorn
        "unicorn/custom-error-definition": ["error"],
        "unicorn/explicit-length-check": ["error"],
        "unicorn/filename-case": ["error", { "case": "snakeCase" }],
        "unicorn/new-for-builtins": ["error"],
        "unicorn/no-abusive-eslint-disable": ["error"],
        "unicorn/no-array-instanceof": ["error"],
        "unicorn/no-null": ["error"],
        "unicorn/no-unused-properties": ["error"],
        "unicorn/prefer-includes": ["error"],
        "unicorn/prefer-starts-ends-with": ["error"],
        "unicorn/prefer-ternary": ["error"],
        "unicorn/prefer-text-content": ["error"],

        // plugin: jsdoc
        "jsdoc/check-param-names": ["error"],
        "jsdoc/check-tag-names": ["error"],
        "jsdoc/empty-tags": ["error"],
        "jsdoc/no-types": ["error"],
        "jsdoc/require-description-complete-sentence": ["error"],
        "jsdoc/require-jsdoc": ["error"],
        "jsdoc/require-param-description": ["error"],
        "jsdoc/require-param-name": ["error"],
        "jsdoc/require-param": ["error"],
        "jsdoc/require-returns-check": ["error"],
        "jsdoc/require-returns-description": ["error"],
        "jsdoc/require-returns": ["error"],
        "jsdoc/require-throws": ["error"]
    }
}
